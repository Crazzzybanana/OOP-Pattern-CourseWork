using System; using System.Text.RegularExpressions;
using OOP_Course_Work.PaymentMethod;  namespace OOP_Course_Work {     abstract class Client     {         protected String name;         protected IPayment paymentMethod;         protected int cardMoney;         protected int cardLimitMoney;         protected int money;         protected String phone;          public String Name         {             get { return name; }             set { name = value; }         }          public IPayment PaymentMethod         {             get { return paymentMethod; }             set { paymentMethod = value; }         }          public int CardMoney         {             get { return cardMoney; }             set             {                 if (value < 0) cardMoney = 0;                 else cardMoney = value;             }         }          public int CardLimitMoney         {             get { return cardLimitMoney; }             set             {                 if (value < 0) cardLimitMoney = 0;                 else cardLimitMoney = value;             }         }          public int Money         {             get { return money; }             set             {                 if (value < 0) money = 0;                 else money = value;             }         }          public String Phone         {             get { return phone; }             set             {                 if (IsValidPhone(value)) phone = value;             }         }          public Client(String name, IPayment payment, int money,         int cMoney, int cLim, String phone)         {             this.name = name;             this.paymentMethod = payment;             this.cardMoney = cMoney;             this.cardLimitMoney = cLim;             this.money = money;             if (IsValidPhone(phone)) this.phone = phone;             else this.phone = null;         }          public Client()         {             this.name = "";             this.paymentMethod = null;             this.cardMoney = 0;             this.cardLimitMoney = 0;             this.money = 0;             this.phone = "";         }          public virtual bool Pay(int sum)         {             return paymentMethod.PayForOrder(this, sum);         }          public abstract void GetOrder();          public bool IsValidPhone(string Phone)         {             try             {                 if (string.IsNullOrEmpty(Phone))                     return false;                 var r = new Regex(@"\(?\d{3}\)?-? *\d{3}-? *-?\d{4}");                 return r.IsMatch(Phone);              }             catch (Exception)             {                 throw;             }         }     } } 